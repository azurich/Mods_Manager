const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ Script de build et release automatis√©\n');

// 1. Lire la version actuelle
const packagePath = path.join(__dirname, 'package.json');
const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
const currentVersion = packageJson.version;

console.log(`üì¶ Version actuelle: ${currentVersion}`);

// 2. Demander directement la nouvelle version
const readline = require('readline');
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function askNewVersion() {
  return new Promise((resolve) => {
    rl.question(`\nüéØ Entrez la nouvelle version (actuelle: ${currentVersion}): `, (version) => {
      resolve(version.trim());
    });
  });
}

async function main() {
  try {
    // Demander directement la nouvelle version
    const newVersion = await askNewVersion();
    
    if (!newVersion) {
      console.log('‚ùå Version invalide');
      process.exit(1);
    }
    
    rl.close();
    
    console.log(`\nüéØ Nouvelle version: ${newVersion}`);
    console.log('\nüìù Mise √† jour du package.json...');
    
    // 3. Mettre √† jour la version dans package.json
    packageJson.version = newVersion;
    fs.writeFileSync(packagePath, JSON.stringify(packageJson, null, 2) + '\n');
    
    console.log('‚úÖ Version mise √† jour dans package.json');
    
    // 4. Mettre √† jour la version dans main.js
    console.log('üìù Mise √† jour de la version dans electron/main.js...');
    const mainJsPath = path.join(__dirname, 'electron', 'main.js');
    
    if (fs.existsSync(mainJsPath)) {
      let mainJsContent = fs.readFileSync(mainJsPath, 'utf8');
      
      // Remplacer la ligne const VERSION = '...'
      const versionRegex = /const VERSION = '[^']+';/;
      const newVersionLine = `const VERSION = '${newVersion}';`;
      
      if (versionRegex.test(mainJsContent)) {
        mainJsContent = mainJsContent.replace(versionRegex, newVersionLine);
        fs.writeFileSync(mainJsPath, mainJsContent);
        console.log('‚úÖ Version mise √† jour dans electron/main.js');
      } else {
        console.log('‚ö†Ô∏è  Ligne VERSION non trouv√©e dans main.js');
      }
    } else {
      console.log('‚ö†Ô∏è  Fichier electron/main.js non trouv√©');
    }
    
    // 5. Mettre √† jour la version dans l'interface utilisateur (mods-manager.tsx)
    console.log('üìù Mise √† jour de la version dans l\'interface utilisateur...');
    const modsManagerPath = path.join(__dirname, 'src', 'components', 'mods-manager.tsx');
    
    if (fs.existsSync(modsManagerPath)) {
      let modsManagerContent = fs.readFileSync(modsManagerPath, 'utf8');
      
      // Remplacer les versions dans l'interface
      const badgeRegex = /<Badge variant="secondary">v[\d.]+<\/Badge>/;
      const versionPRegex = /<p>Version: [\d.]+<\/p>/;
      
      const newBadgeLine = `<Badge variant="secondary">v${newVersion}</Badge>`;
      const newVersionPLine = `<p>Version: ${newVersion}</p>`;
      
      let updated = false;
      
      if (badgeRegex.test(modsManagerContent)) {
        modsManagerContent = modsManagerContent.replace(badgeRegex, newBadgeLine);
        updated = true;
        console.log('‚úÖ Badge version mis √† jour');
      }
      
      if (versionPRegex.test(modsManagerContent)) {
        modsManagerContent = modsManagerContent.replace(versionPRegex, newVersionPLine);
        updated = true;
        console.log('‚úÖ Texte version mis √† jour');
      }
      
      if (updated) {
        fs.writeFileSync(modsManagerPath, modsManagerContent);
        console.log('‚úÖ Interface utilisateur mise √† jour');
      } else {
        console.log('‚ö†Ô∏è  Aucune version trouv√©e dans l\'interface');
      }
    } else {
      console.log('‚ö†Ô∏è  Fichier mods-manager.tsx non trouv√©');
    }
    
    // 6. Build React
    console.log('\nüî® Build React...');
    execSync('npm run build:react', { stdio: 'inherit' });
    
    // 7. Build Electron
    console.log('\nüì¶ Build Electron...');
    execSync('npm run build:electron', { stdio: 'inherit' });
    
    // 8. Afficher les fichiers g√©n√©r√©s
    console.log('\nüìÅ Fichiers g√©n√©r√©s dans dist-electron/:');
    try {
      const allFiles = require('fs').readdirSync('./dist-electron');
      const exeFiles = allFiles.filter(f => f.endsWith('.exe'));
      const ymlFiles = allFiles.filter(f => f.endsWith('.yml'));
      
      console.log('\nüì¶ Installateurs NSIS:');
      exeFiles.forEach(file => console.log(`   ‚úÖ ${file}`));
      
      console.log('\nüìÑ M√©tadonn√©es electron-updater:');
      ymlFiles.forEach(file => console.log(`   ‚úÖ ${file}`));
      
      // V√©rifier qu'on a bien les deux architectures
      const hasX64 = exeFiles.some(f => f.includes('x64'));
      const hasIa32 = exeFiles.some(f => f.includes('ia32'));
      const hasLatest = ymlFiles.some(f => f.includes('latest'));
      
      console.log('\nüéØ V√©rification des builds:');
      console.log(`   ${hasX64 ? '‚úÖ' : '‚ùå'} Installateur x64 (64-bit)`);
      console.log(`   ${hasIa32 ? '‚úÖ' : '‚ùå'} Installateur ia32 (32-bit)`);
      console.log(`   ${hasLatest ? '‚úÖ' : '‚ùå'} Fichier latest.yml pour les mises √† jour`);
      
      if (!hasX64 || !hasIa32 || !hasLatest) {
        console.log('\n‚ö†Ô∏è  Attention: Certains fichiers attendus sont manquants!');
      }
      
    } catch (error) {
      console.log('   Aucun fichier trouv√© dans dist-electron/');
    }
    
    console.log(`\n‚úÖ Build v${newVersion} termin√© avec succ√®s !`);
    console.log('üìÅ Les fichiers sont pr√™ts dans le dossier dist-electron/');
    console.log('üöÄ Compatible avec electron-updater pour les mises √† jour automatiques');
    console.log('');
    console.log('üìã Prochaines √©tapes:');
    console.log('   1. Cr√©ez une nouvelle release sur GitHub avec le tag v' + newVersion);
    console.log('   2. Uploadez TOUS les fichiers (.exe + latest.yml) sur GitHub Releases');
    console.log('   3. Titre sugg√©r√©: "Mods Manager v' + newVersion + '"');
    console.log('   4. Les utilisateurs recevront automatiquement la notification de mise √† jour');
    console.log('   5. Electron-updater g√©rera les mises √† jour automatiquement');
    console.log('');
    console.log('üåê Liens utiles:');
    console.log('   ‚Ä¢ Site web: https://modsmanager.azurich.fr');
    console.log('   ‚Ä¢ GitHub Releases: https://github.com/azurich/Mods_Manager/releases');
    console.log('   ‚Ä¢ Support: contact@azurich.fr');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    process.exit(1);
  }
}

main();